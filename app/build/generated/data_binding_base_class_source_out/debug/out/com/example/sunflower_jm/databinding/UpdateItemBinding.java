// Generated by view binder compiler. Do not edit!
package com.example.sunflower_jm.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.sunflower_jm.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdateItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnAddImage;

  @NonNull
  public final Button btnUpdateCompletion;

  @NonNull
  public final EditText editContent;

  @NonNull
  public final EditText editTitle;

  @NonNull
  public final TextView updateItemTitle;

  private UpdateItemBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnAddImage,
      @NonNull Button btnUpdateCompletion, @NonNull EditText editContent,
      @NonNull EditText editTitle, @NonNull TextView updateItemTitle) {
    this.rootView = rootView;
    this.btnAddImage = btnAddImage;
    this.btnUpdateCompletion = btnUpdateCompletion;
    this.editContent = editContent;
    this.editTitle = editTitle;
    this.updateItemTitle = updateItemTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdateItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdateItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdateItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_addImage;
      Button btnAddImage = ViewBindings.findChildViewById(rootView, id);
      if (btnAddImage == null) {
        break missingId;
      }

      id = R.id.btn_update_completion;
      Button btnUpdateCompletion = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdateCompletion == null) {
        break missingId;
      }

      id = R.id.edit_content;
      EditText editContent = ViewBindings.findChildViewById(rootView, id);
      if (editContent == null) {
        break missingId;
      }

      id = R.id.edit_title;
      EditText editTitle = ViewBindings.findChildViewById(rootView, id);
      if (editTitle == null) {
        break missingId;
      }

      id = R.id.update_item_title;
      TextView updateItemTitle = ViewBindings.findChildViewById(rootView, id);
      if (updateItemTitle == null) {
        break missingId;
      }

      return new UpdateItemBinding((ConstraintLayout) rootView, btnAddImage, btnUpdateCompletion,
          editContent, editTitle, updateItemTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
