// Generated by view binder compiler. Do not edit!
package com.example.sunflower_jm.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.sunflower_jm.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AddItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView addItemTitle;

  @NonNull
  public final Button btnAddImage;

  @NonNull
  public final Button btnCompletion;

  @NonNull
  public final EditText editContent;

  @NonNull
  public final EditText editTitle;

  private AddItemBinding(@NonNull ConstraintLayout rootView, @NonNull TextView addItemTitle,
      @NonNull Button btnAddImage, @NonNull Button btnCompletion, @NonNull EditText editContent,
      @NonNull EditText editTitle) {
    this.rootView = rootView;
    this.addItemTitle = addItemTitle;
    this.btnAddImage = btnAddImage;
    this.btnCompletion = btnCompletion;
    this.editContent = editContent;
    this.editTitle = editTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AddItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AddItemBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.add_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AddItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_item_title;
      TextView addItemTitle = ViewBindings.findChildViewById(rootView, id);
      if (addItemTitle == null) {
        break missingId;
      }

      id = R.id.btn_addImage;
      Button btnAddImage = ViewBindings.findChildViewById(rootView, id);
      if (btnAddImage == null) {
        break missingId;
      }

      id = R.id.btn_completion;
      Button btnCompletion = ViewBindings.findChildViewById(rootView, id);
      if (btnCompletion == null) {
        break missingId;
      }

      id = R.id.edit_content;
      EditText editContent = ViewBindings.findChildViewById(rootView, id);
      if (editContent == null) {
        break missingId;
      }

      id = R.id.edit_title;
      EditText editTitle = ViewBindings.findChildViewById(rootView, id);
      if (editTitle == null) {
        break missingId;
      }

      return new AddItemBinding((ConstraintLayout) rootView, addItemTitle, btnAddImage,
          btnCompletion, editContent, editTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
